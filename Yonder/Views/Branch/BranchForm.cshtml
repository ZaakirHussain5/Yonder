
@model Yonder.Models.CompanyProfile
@{
    ViewBag.Title = "BranchForm";
    Layout = "~/Views/AdminHome/_adminHomePage.cshtml";
}

<div class="loading" style="display:none">Loading</div>

<div class="container" style="margin-top:20px">
    <div class="row">
        <div class="col-lg-3 col-sm-6">
            <div class="card hovercard">
                <div class="cardheader">
                </div>
                <div class="avatar">
                    <img alt="" src="@Url.Content(Model.companyMaster.Logo)">
                </div>
                <div class="info">
                    <div class="title">
                        <a target="_blank" href="#">@Model.companyMaster.company</a>
                    </div>
                    <div class="desc">@Model.companyMaster.headOffice</div>
                    <div class="desc">@Model.companyMaster.State</div>
                    <div class="desc">@Model.companyMaster.City</div>
                    <div class="desc">@Model.companyMaster.Website</div>
                </div>
            </div>
        </div>
        <div class="col-lg-9 col-sm-6">
            <h2 style="background-color:#F7D031;padding:15px 15px 15px 15px;">New Branch</h2>
            <div class="panel panel-default">
                <div class="panel-body">
                    @using (Ajax.BeginForm("Save", "Branch", new AjaxOptions { HttpMethod = "Post" }, new { id="branchForm" }))
                    {
                        @Html.AntiForgeryToken()
                        <div class="row">
                            <div class="form-group col-md-12">
                                <input type="checkbox" id="checkAddress" />
                                <label>Address same as Head Office?</label>
                            </div>
                            <div class="form-group col-md-6">
                                @Html.LabelFor(m => m.BranchName, new { @class = "control-label" })
                                @Html.ValidationMessageFor(m => m.BranchName, "", new { @class = "text-danger" })
                                @Html.EditorFor(m => m.BranchName, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Branch Name" } })
                            </div>
                            <div class="form-group col-md-6">
                                @Html.LabelFor(m => m.GeoLocation, new { @class = "control-label" }) &nbsp;<i class="glyphicon glyphicon-map-marker"></i>
                                @Html.ValidationMessageFor(m => m.GeoLocation, "", new { @class = "text-danger" })
                                @Html.EditorFor(m => m.GeoLocation, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Geo Location" } })
                            </div>
                            <div class="form-group col-md-6">
                                @Html.LabelFor(m => m.Address, new { @class = "control-label" })
                                @Html.ValidationMessageFor(m => m.Address, "", new { @class = "text-danger" })
                                @Html.EditorFor(m => m.Address, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Branch Address",id="Address" } })
                            </div>
                            <div class="form-group col-md-6">
                                @Html.LabelFor(m => m.pincode, new { @class = "control-label" })
                                @Html.ValidationMessageFor(m => m.pincode, "", new { @class = "text-danger" })
                                @Html.EditorFor(m => m.pincode, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Pin Code" , id="PinCode" } })
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label " })
                                @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
                                @Html.DropDownListFor(model => model.State, new List<SelectListItem>(), "Select State", new { @class = "form-control", id = "stateList", onchange = "loadCity(this.selectedIndex)" })
                                @if (@Model.id != 0)
                                {
                            <label>@Model.State</label>
                                }
                            </div>
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label " })
                                @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                                @Html.DropDownListFor(model => model.City, new List<SelectListItem>(), "Select City", new { @class = "form-control", id = "cityList" })
                                @if (@Model.id != 0)
                                {
                            <label>@Model.City</label>
                                }
                            </div>

                            <div class="form-group col-md-6">
                                @Html.LabelFor(m => m.ContactPerson, new { @class = "control-label" })
                                @Html.ValidationMessageFor(m => m.ContactPerson, "", new { @class = "text-danger" })
                                @Html.EditorFor(m => m.ContactPerson, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Contact Person Name" } })
                            </div>
                            <div class="form-group col-md-6">
                                @Html.LabelFor(m => m.Designation, new { @class = "control-label" })
                                @Html.ValidationMessageFor(m => m.Designation, "", new { @class = "text-danger" })
                                @Html.EditorFor(m => m.Designation, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Contact Person Designation" } })
                            </div>
                            <div class="form-group col-md-4">
                                @Html.LabelFor(m => m.Email, new { @class = "control-label" })
                                @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                                @Html.EditorFor(m => m.Email, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Email Address" } })
                            </div>
                            <div class="form-group col-md-4">
                                @Html.LabelFor(m => m.MobileNumber, new { @class = "control-label" })
                                @Html.ValidationMessageFor(m => m.MobileNumber, "", new { @class = "text-danger" })
                                @Html.EditorFor(m => m.MobileNumber, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Mobile Number" } })
                            </div>
                            <div class="form-group col-md-4">
                                @Html.LabelFor(m => m.OptionalNumber, new { @class = "control-label" })
                                @Html.ValidationMessageFor(m => m.OptionalNumber, "", new { @class = "text-danger" })
                                @Html.EditorFor(m => m.OptionalNumber, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Optional Contact Number" } })
                            </div>
                            @Html.HiddenFor(m=>m.company)
                            @Html.HiddenFor(m => m.id)
                            <div class="form-group col-md-12">
                                <div class="">
                                    <input type="submit" value="Save" class="btn btn-default" style="background-color:#ffda0f;width:120px" />
                                    <button type="reset" class="btn btn-default" style="width:120px">Reset</button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <div class="panel-footer">
                    @Html.ActionLink("Back to List", "Details", "CompanyRegistration", new { id = Model.companyMaster.id }, new { })
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")

    <script>

        function loadCity(index) {
            print_city('cityList', index)
        }

   

        $(document).ready(function () {
            $('#checkAddress').click(function () {
                if ($('#checkAddress').prop("checked") == true) {
                    $('#branchForm #Address').val('@Model.companyMaster.headOffice');
                    $('#stateList').val('@Model.companyMaster.State').change();
                    $('#cityList').val('@Model.companyMaster.City').change();
                    $('#branchForm #PinCode').val('@Model.companyMaster.PinCode');
                }
                else {
                    $('#branchForm').trigger("reset");
                }
            })

            print_state('stateList');

            $('#branchForm').submit(function (event) {
                event.preventDefault()
                event.stopImmediatePropagation()
                var data = new FormData($('#branchForm').get(0))
                var action = $('#branchForm').attr('action')
                if ($('#branchForm').valid()) {
                    $('.loading').show()
                    $.ajax({
                        type: 'POST',
                        data: data,
                        url: action,
                        contentType: false,
                        processData: false,
                        success: function (result) {
                            $('.loading').hide()
                            if (result.Success) {
                                toastr.success(result.Message, "Success", { positionClass: 'toast-top-center' })
                            }
                            else {
                                toastr.error(result.Message, "Error", { positionClass: 'toast-top-center' })
                            }
                        },
                        error: function () {
                            $('.loading').hide()
                            toastr.error("Error Occured", "Error", { positionClass: 'toast-top-center' })
                        }
                    })

                }
            })
           

        })
    </script>
}